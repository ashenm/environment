#!/usr/bin/env sh
#
# Deploy build artifacts as a GitHub release
# https://github.com/ashenm/environment
#
# Ashen Gunaratne
# mail@ashenm.ml
#

# errexit
set -e

# repository
REPOSITORY="ashenm/environment"

# color escapes
ANSI_RED="\033[31m"
ANSI_RESET="\033[0m"
ANSI_YELLOW="\033[33m"

# verbosity
STDOUT=/dev/stdout

# script reference
SELF="$(basename $0)"

# parse args
while [ $# -ne 0 ]
do

  case "$1" in

    --silent)
      STDOUT=/dev/null
      shift
      ;;

    --prerelease)
      PRERELEASE="true"
      shift
      ;;

    --tag)
      TAG_NAME="${2:?Invalid TAG}"
      shift 2
      ;;

    -*|--*)
      echo >&2 "${SELF}: Invalid option $1"
      exit 1
      ;;

    *)
      echo >&2 "${SELF}: Invalid parameter $1"
      exit 1
      ;;

  esac

done

# ensure requisite meta
test -z "$TAG_NAME" && {
  echo >&2 "${ANSI_RED}${SELF}: Missing required parameter TAG${ANSI_RESET}"; exit 1; }

# ensure requisite files
test -f releases/windows/aliases.cab || {
  echo >&2 "${ANSI_RED}Missing requisit file(s)${ANSI_RESET}"; exit 1; }

echo 1>$STDOUT "${ANSI_YELLOW}Preparing release ${TAG_NAME}${ANSI_RESET}"

# create new lightweight tag
curl --silent --fail --show-error --request POST --header "Authorization: token $GITHUB_TOKEN" --output /dev/null --url "https://api.github.com/repos/$REPOSITORY/git/tags" \
  --data "{ \"tag\": \"$TAG_NAME\", \"message\": \"Deploy $TAG_NAME\", \"object\": \"$(git log --max-count=1 --format="%H")\", \"type\": \"commit\" }"

echo 1>$STDOUT "${ANSI_YELLOW}Deploying ${PRERELEASE+pre-}release${ANSI_RESET}"

# create release
RELEASE_ID="$(curl --fail --silent --show-error --request POST --header "Authorization: token $GITHUB_TOKEN" --url "https://api.github.com/repos/$REPOSITORY/releases" \
  --data "{ \"tag_name\": \"$TAG_NAME\", \"target_commitish\": \"$(git log --max-count=1 --format="%H")\", \"name\": \"$TAG_NAME\", \"prerelease\": ${PRERELEASE:-false}, \"body\": \"Built from $(git log --max-count=1 --format="%h")\" }" | jq --raw-output '.id')"

echo 1>$STDOUT "${ANSI_YELLOW}Uploading artifact aliases.cab${ANSI_RESET}"

# upload aliases.cab
curl --silent --fail --show-error --request POST --header "Authorization: token $GITHUB_TOKEN" --header "Content-Type: application/vnd.ms-cab-compressed" \
  --data-binary "@releases/windows/aliases.cab" --output /dev/null --url "https://uploads.github.com/repos/$REPOSITORY/releases/$RELEASE_ID/assets?name=aliases.cab&label=Windows%20Binaries"
